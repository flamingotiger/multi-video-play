{"version":3,"sources":["store/reducers/card.ts","hooks/card.ts","components/VideoPlayer/index.tsx","App.tsx","serviceWorker.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["addCard","url","id","uuid","v4","action","removeCard","createReducer","cards","state","produce","draft","payload","filter","card","useCard","useSelector","useDispatch","VideoPlayer","dispatch","Card","style","position","Header","cursor","onClick","size","icon","faTimes","Body","controls","width","height","allowFullScreen","config","youtube","playerVars","rel","modestbranding","origin","Button","variant","FormBottomStyle","styled","div","FormVideoUrlStyle","form","App","useForm","register","handleSubmit","className","Navbar","bg","expand","sticky","Brand","href","Collapse","Nav","Link","target","faGithub","color","Container","map","key","onSubmit","data","exec","console","log","Form","Control","flex","type","name","defaultValue","ref","autoComplete","placeholder","Boolean","window","location","hostname","match","rootReducer","combineReducers","persistConfig","storage","persistedReducer","persistReducer","store","createStore","process","persistor","persistStore","Store","ReactDOM","render","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.09be603b.chunk.js","sourcesContent":["import produce from 'immer';\nimport { action, ActionType, createReducer } from 'typesafe-actions';\nimport uuid from \"uuid\";\n\nexport const ADD_CARD = \"ADD_CARD\";\nexport const REMOVE_CARD = \"REMOVE_CARD\"\n\nexport const addCard = (url: string) => {\n    const id: string = uuid.v4();\n    return action(ADD_CARD, { id, url });\n};\n\nexport const removeCard = (id: string) => action(REMOVE_CARD, { id });\n\nconst actions = {\n    addCard,\n    removeCard\n};\n\nexport { actions };\n\nexport interface CardType {\n    id: string;\n    url: string;\n}\n\nexport interface CardState {\n    cards: CardType[];\n}\n\nexport type CardActions = ActionType<typeof actions>;\n\nconst initialState: CardState = {\n    cards: []\n};\n\nexport default createReducer<CardState, CardActions>(initialState, {\n    [ADD_CARD]: (state, action) =>\n        produce(state, draft => {\n            draft.cards = [...draft.cards, { url: action.payload.url, id: action.payload.id }];\n        }),\n    [REMOVE_CARD]: (state, action) =>\n        produce(state, draft => {\n            draft.cards = draft.cards.filter(card => card.id !== action.payload.id)\n        })\n});\n","import { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from 'store/reducers';\nimport { Dispatch } from 'redux';\nimport { CardState } from 'store/reducers/card';\n\nconst useCard = (): [CardState, Dispatch] => {\n    const state = useSelector((state: RootState):CardState => state.card);\n    const dispatch = useDispatch();\n    return [state, dispatch];\n}\n\nexport default useCard;","import React from 'react';\nimport { Button, Card } from \"react-bootstrap\";\nimport ReactPlayer from 'react-player';\nimport { CardType, removeCard } from 'store/reducers/card';\nimport useCard from 'hooks/card';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\n\ninterface VideoPlayerProps {\n    card: CardType;\n}\nconst VideoPlayer: React.FC<VideoPlayerProps> = ({ card }) => {\n    const [, dispatch] = useCard();\n    return (<Card style={{position:'absolute'}}>\n        <Card.Header>\n            <FontAwesomeIcon style={{ cursor: \"pointer\" }} onClick={() => dispatch(removeCard(card.id))} size=\"lg\" icon={faTimes} />\n        </Card.Header>\n        <Card.Body>\n            <ReactPlayer\n                url={card.url}\n                controls={true}\n                width='100%'\n                height='100%'\n                allowFullScreen\n                config={{\n                    youtube: {\n                        playerVars: { rel: 0, modestbranding: 0, origin: 1 },\n                    },\n                }}\n            />\n            <Button variant=\"primary\" onClick={() => dispatch(removeCard(card.id))}>CLOSE VIDEO</Button>\n        </Card.Body>\n    </Card>)\n};\n\nexport default VideoPlayer;\n","import React, { useState } from 'react';\nimport VideoPlayer from 'components/VideoPlayer';\nimport { Button, Form, Navbar, Nav, Container } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\nimport useCard from 'hooks/card';\nimport styled from 'styled-components';\nimport useForm from 'react-hook-form';\nimport { CardType, addCard } from 'store/reducers/card';\n\nconst FormBottomStyle = styled.div`\n        position:fixed; \n        bottom:0;\n        left:0;\n        width:100%;\n        padding:10px;\n`\nconst FormVideoUrlStyle = styled.form`\n        display:flex;\n        justify-content:space-between;\n        align-items:center;\n        width:100%;\n        \n`\n\nconst App: React.FC = () => {\n    const [state, dispatch] = useCard();\n    const { register, handleSubmit } = useForm();\n    const onSubmit = (data: any) => {\n        const url_check = /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/;\n        if (url_check.exec(data.url)) {\n            console.log('success');\n            dispatch(addCard(data.url));\n        };\n    }\n\n    return (\n        <div className=\"App\">\n            <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" sticky=\"top\">\n                <Navbar.Brand href=\"/\">React-Multi-Play</Navbar.Brand>\n                <Navbar.Collapse className=\"justify-content-end\">\n                    <Nav.Link href=\"https://flamingotiger.github.io\" target='_blank'>\n                        <FontAwesomeIcon icon={faGithub} color='white' />\n                    </Nav.Link>\n                </Navbar.Collapse>\n            </Navbar>\n            <Container>\n                {state.cards.map((card: CardType) => <VideoPlayer key={card.id} card={card} />)}\n            </Container>\n            <FormBottomStyle>\n                <FormVideoUrlStyle onSubmit={handleSubmit(onSubmit)}>\n                    <Form.Control style={{ flex: 8 }} type=\"text\" name=\"url\" defaultValue=\"https://www.youtube.com/watch?v=RDQGPs7StNA\" ref={register} autoComplete=\"off\" placeholder=\"Input the video url\" />\n                    <Button style={{ flex: 2 }} type=\"submit\" variant=\"outline-success\">ADD VIDEO</Button>\n                </FormVideoUrlStyle>\n            </FormBottomStyle>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport card from './card';\n\nconst rootReducer = combineReducers({\n    card\n});\n\nexport type RootState = ReturnType<typeof rootReducer>\nexport default rootReducer;\n","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst persistConfig = {\n    key: 'root',\n    storage\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport default () => {\n    const isDev = process.env.NODE_ENV === 'development';\n    const reduxDevTools = isDev && (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__();\n    const store = createStore(persistedReducer, reduxDevTools);\n    const persistor = persistStore(store);\n    return {store, persistor}\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport Store from 'store/index';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nconst {persistor, store} = Store();\n\nReactDOM.render(\n    <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n            <App/>\n        </PersistGate>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}