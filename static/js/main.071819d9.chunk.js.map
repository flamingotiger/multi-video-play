{"version":3,"sources":["assets/splash.jpg","store/reducers/card.ts","hooks/card.ts","components/VideoPlayer/index.tsx","components/Header/index.tsx","components/VideoPostForm/index.tsx","store/reducers/splash.ts","hooks/splash.ts","components/Splash/index.tsx","App.tsx","serviceWorker.ts","store/reducers/index.ts","store/index.ts","index.tsx"],"names":["module","exports","addCard","url","title","description","id","uuid","v4","action","removeCard","createReducer","cards","state","produce","draft","payload","filter","card","useCard","useSelector","useDispatch","CardWrapperStyle","styled","li","CardStyle","div","IconStyle","button","VideoPlayer","dispatch","icon","faTrash","size","onClick","controls","width","height","allowFullScreen","config","youtube","playerVars","rel","modestbranding","origin","HeaderStyle","header","LinkStyle","a","Header","href","faGithub","color","FormPostStyle","FormHeadStyle","h2","FormVideoUrlStyle","form","FormButtonStyle","FormInput","input","FormLabel","label","VideoPostForm","useForm","register","handleSubmit","onSubmit","data","exec","console","log","type","name","defaultValue","ref","autoComplete","placeholder","startSplash","isSplash","useSplash","splash","duplicateStyle","keyframesIcon","keyframes","AnimIcon","SplashStyle","splashImage","props","SplashBlurStyle","SplashBodyStyle","ContentWrapperStyle","H1","h1","H2","Splash","faArrowRight","AppStyle","section","ContainerStyle","ul","ContainerHeadStyle","App","map","key","Boolean","window","location","hostname","match","rootReducer","combineReducers","persistConfig","storage","persistedReducer","persistReducer","store","createStore","process","persistor","persistStore","Store","ReactDOM","render","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.071819d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/splash.404cf0db.jpg\";","import produce from 'immer';\nimport { action, ActionType, createReducer } from 'typesafe-actions';\nimport uuid from \"uuid\";\n\nexport const ADD_CARD = \"ADD_CARD\";\nexport const REMOVE_CARD = \"REMOVE_CARD\";\n\nexport const addCard = (url: string, title: string = '', description: string = '') => {\n    const id: string = uuid.v4();\n    return action(ADD_CARD, { id, url, title, description });\n};\n\nexport const removeCard = (id: string) => action(REMOVE_CARD, { id });\n\nconst actions = {\n    addCard,\n    removeCard\n};\n\nexport { actions };\n\nexport interface CardType {\n    id: string;\n    url: string;\n    title: string;\n    description: string;\n}\n\nexport interface CardState {\n    cards: CardType[];\n}\n\nexport type CardActions = ActionType<typeof actions>;\n\nconst initialState: CardState = {\n    cards: []\n};\n\nexport default createReducer<CardState, CardActions>(initialState, {\n    [ADD_CARD]: (state, action) =>\n        produce(state, draft => {\n            draft.cards = [...state.cards, {\n                url: action.payload.url, \n                id: action.payload.id, \n                title: action.payload.title,\n                description: action.payload.description\n            }];\n        }),\n    [REMOVE_CARD]: (state, action) =>\n        produce(state, draft => {\n            draft.cards = state.cards.filter(card => card.id !== action.payload.id)\n        })\n});\n","import { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from 'store/reducers';\nimport { Dispatch } from 'redux';\nimport { CardState } from 'store/reducers/card';\n\nconst useCard = (): [CardState, Dispatch] => {\n    const state = useSelector((state: RootState):CardState => state.card);\n    const dispatch = useDispatch();\n    return [state, dispatch];\n}\n\nexport default useCard;","import React from 'react';\nimport ReactPlayer from 'react-player';\nimport { CardType, removeCard } from 'store/reducers/card';\nimport useCard from 'hooks/card';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nconst CardWrapperStyle = styled.li`\n        flex-basis: calc(50% - 40px);\n        margin: 10px;\n        list-style: none;\n`\n\nconst CardStyle = styled.div`\n        position: relative;\n        width: 100%;\n        height: 270px;\n        border-radius: 10px;\n        overflow: hidden;\n`;\n\nconst IconStyle = styled.button`\n        width: 30px;\n        height: 30px;\n        cursor: pointer;\n        background: none;\n        border: 0;\n        outline: none;\n`;\n\ninterface VideoPlayerProps {\n    card: CardType;\n}\nconst VideoPlayer: React.FC<VideoPlayerProps> = ({ card }) => {\n    const [, dispatch] = useCard();\n    if (!card) return null;\n\n    return (\n        <CardWrapperStyle>\n            <div>\n                <IconStyle>\n                    <FontAwesomeIcon icon={faTrash} size=\"2x\" onClick={() => dispatch(removeCard(card.id))} />\n                </IconStyle>\n                <div>\n                    {card.title && <h3>{card.title}</h3>}\n                    {card.description && <div>{card.description}</div>}\n                </div>\n            </div>\n            <CardStyle>\n                <ReactPlayer\n                    url={card.url}\n                    controls={true}\n                    width='100%'\n                    height='100%'\n                    allowFullScreen\n                    config={{\n                        youtube: {\n                            playerVars: { rel: 0, modestbranding: 0, origin: 1 },\n                        },\n                    }}\n                />\n            </CardStyle>\n        </CardWrapperStyle>)\n};\n\nexport default VideoPlayer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\n\nconst HeaderStyle = styled.header`\n        background: linear-gradient(90deg, rgb(75,80,250), rgb(225,60,230));\n        display: flex;\n        flex-wrap: wrap;\n        align-items: center;\n        justify-content: space-between;\n        padding: 1.2rem 1rem;\n`\nconst LinkStyle = styled.a`\n        font-weight: bold;\n        color: white;     \n        text-decoration: none;\n`\n\nconst Header:React.FC = () => {\n    return <HeaderStyle>\n        <LinkStyle href=\"/\">Multi-Player</LinkStyle>\n        <FontAwesomeIcon icon={faGithub} color='white' />\n    </HeaderStyle>\n}\n\nexport default Header;","import React from 'react';\nimport styled from 'styled-components';\nimport useCard from 'hooks/card';\nimport useForm from 'react-hook-form';\nimport { addCard } from 'store/reducers/card';\n\nconst FormPostStyle = styled.div`\n        position: fixed; \n        bottom: -470px;\n        left: 50%;\n        margin-left: -200px;\n        width: 400px;\n        height: 500px;\n        transition: 200ms;\n        box-sizing:border-box;\n        &:hover{\n            bottom:0;\n        }\n        background:none;\n`\n\nconst FormHeadStyle = styled.h2`\n        text-align: center;\n        font-size: 24px;\n`\nconst FormVideoUrlStyle = styled.form`\n        width: 100%;\n        padding: 40px;\n        box-sizing: border-box;\n        background: white;\n        border-radius: 10px;\n`\nconst FormButtonStyle = styled.button`\n        transition: 500ms;\n        width: 100%;\n        padding: 10px;\n        box-sizing: border-box;\n        color: white;\n        cursour: pointer;\n        background: linear-gradient(90deg, rgb(75,80,250), rgb(225,60,230));\n        border: none;\n        font-weight: bold;\n        font-size: 18px;\n        border-radius: 5px;\n        cursor: pointer;\n        margin-top: 20px;\n`\n\nconst FormInput = styled.input`\n        display: block;\n        width: 100%;\n        padding: 10px;\n        margin-bottom: 12px;\n        font-size: 14px;\n        box-sizing: border-box;\n        border-left: 0;\n        border-right: 0;\n        border-bottom: 1px solid rgb(240,240,240);\n        border-top: 0;\n        boder-radius: 5px;\n        outline: none;\n        transition: 500ms;\n        &:focus {\n            border-bottom: 1px solid rgb(75,80,250);\n        }\n`\nconst FormLabel = styled.label`\n        font-size: 12px;\n        text-align: left;\n        margin-bottom: 4px;\n        display: block;\n`\n\nconst VideoPostForm: React.FC = () => {\n    const [, dispatch] = useCard();\n    const { register, handleSubmit } = useForm();\n\n    const onSubmit = (data: any) => {\n        const url_check = /^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/;\n        if (url_check.exec(data.url)) {\n            console.log('success');\n            dispatch(addCard(data.url, data.title, data.description));\n        };\n    }\n    return <FormPostStyle>\n        <FormVideoUrlStyle onSubmit={handleSubmit(onSubmit)}>\n            <FormHeadStyle>비디오영상 추가하기</FormHeadStyle>\n            <FormLabel>Video url</FormLabel>\n            <FormInput type=\"text\" name=\"url\" defaultValue=\"https://www.youtube.com/watch?v=RDQGPs7StNA\" ref={register} autoComplete=\"off\" placeholder=\"Youtube URL을 입력해주세요\" />\n            <FormLabel>Title</FormLabel>\n            <FormInput type=\"text\" name=\"title\" ref={register} autoComplete=\"off\" placeholder=\"제목을 입력해주세요\" />\n            <FormLabel>Description</FormLabel>\n            <FormInput type=\"text\" name=\"description\" ref={register} autoComplete=\"off\" placeholder=\"설명을 입력해주세요\" />\n            <FormButtonStyle type=\"submit\">추가하기</FormButtonStyle>\n        </FormVideoUrlStyle>\n    </FormPostStyle>\n};\n\nexport default VideoPostForm;\n","import produce from 'immer';\nimport { action, ActionType, createReducer } from 'typesafe-actions';\n\nexport const START_SPLASH = \"START_SPLASH\";\n\nexport const startSplash = () => action(START_SPLASH);\n\nconst actions = {\n    startSplash\n};\n\nexport { actions };\n\nexport interface SplashState {\n    isSplash: boolean;\n}\n\nexport type SplashActions = ActionType<typeof actions>;\n\nconst initialState: SplashState = {\n    isSplash: true\n};\n\nexport default createReducer<SplashState, SplashActions>(initialState, {\n    [START_SPLASH]: state =>\n        produce(state, draft => {\n            draft.isSplash = false;\n        })\n});\n","import { useSelector, useDispatch } from 'react-redux';\nimport { RootState } from 'store/reducers';\nimport { Dispatch } from 'redux';\nimport { SplashState } from 'store/reducers/splash';\n\nconst useSplash = (): [SplashState, Dispatch] => {\n    const state = useSelector((state: RootState):SplashState => state.splash);\n    const dispatch = useDispatch();\n    return [state, dispatch];\n}\n\nexport default useSplash;","import React from 'react';\nimport styled, { keyframes } from 'styled-components';\nimport splashImage from 'assets/splash.jpg';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowRight } from '@fortawesome/free-solid-svg-icons';\nimport { startSplash, SplashState } from 'store/reducers/splash';\nimport useSplash from 'hooks/splash';\n\nconst duplicateStyle = `\n        position: fixed;\n        top: 0;\n        left: 0;\n        width: 100%;\n        height: 100%;\n        transition: 0.5s;\n`\n\nconst keyframesIcon = keyframes`\n    0%{\n        transform: translateX(0);   \n    }\n    100%{\n        transform: translateX(10px);\n    }\n`\n\nconst AnimIcon = styled.div`\n    animation-name: ${keyframesIcon};\n    animation-duration: 1s;\n    animation-iteration-count: infinite;\n    animation-direction: alternate;\n     cursor:pointer;\n`\nconst SplashStyle = styled.div`\n        ${duplicateStyle}\n        background: url(${splashImage});\n        background-size: 100%;\n        background-position: center;\n        z-index: 9997;\n        ${(props: SplashState) => {\n        if (!props.isSplash) {\n            return `left: 100%`\n        }\n    }}\n`;\nconst SplashBlurStyle = styled.div`\n       ${duplicateStyle}\n        background: rgba(0,0,0,0.5);\n        z-index: 9998;\n        ${(props: SplashState) => {\n        if (!props.isSplash) {\n            return `left: 100%`\n        }\n    }}\n`\nconst SplashBodyStyle = styled.div`\n        ${duplicateStyle}\n        z-index: 9999;\n        display: flex;\n        align-items: flex-end;\n        ${(props: SplashState) => {\n        if (!props.isSplash) {\n            return `left: 100%`\n        }\n    }}\n`\nconst ContentWrapperStyle = styled.div`\n        display: flex;\n        width: 100%;\n        height: 200px;\n        justify-content: space-around;\n        align-items: center;\n`\n\nconst H1 = styled.h1`\n    font-size: 24px;\n    color: white;\n`\nconst H2 = styled.h2`\n    font-size: 18px;\n    color: white;\n`\nconst Splash = () => {\n    const [state, dispatch] = useSplash();\n    return (\n        <>\n            <SplashBlurStyle isSplash={state.isSplash} />\n            <SplashStyle isSplash={state.isSplash} />\n            <SplashBodyStyle isSplash={state.isSplash}>\n                <ContentWrapperStyle>\n                    <div>\n                        <H1>Muli Player</H1>\n                        <H2>여러개의 영상을 한번에 볼수 있습니다.</H2>\n                    </div>\n                    <AnimIcon>\n                        <FontAwesomeIcon icon={faArrowRight} color=\"white\" size=\"7x\" onClick={() => dispatch(startSplash())} />\n                    </AnimIcon>\n                </ContentWrapperStyle>\n            </SplashBodyStyle>\n        </>)\n}\n\nexport default Splash;","import React from 'react';\nimport VideoPlayer from 'components/VideoPlayer';\nimport useCard from 'hooks/card';\nimport styled from 'styled-components';\nimport { CardType } from 'store/reducers/card';\nimport Header from 'components/Header';\nimport VideoPostForm from 'components/VideoPostForm';\nimport Splash from 'components/Splash';\n\nconst AppStyle = styled.section`\n        position:relative;\n        background-color: rgb(240,240,240);\n        width: 100%;\n        height: 100%;\n`\nconst ContainerStyle = styled.ul`\n        display: flex;\n        flex-wrap: wrap;\n        max-width: 100%;\n`\nconst ContainerHeadStyle = styled.h2`\n        font-size: 24px;\n        margin: 10px 20px 0 20px;\n        font-weight: bold;\n        padding: 0;\n`\nconst App: React.FC = () => {\n    const [state] = useCard();\n    return (\n        <AppStyle>\n            <Splash />\n            <Header />\n            <ContainerHeadStyle>내 비디오 리스트</ContainerHeadStyle>\n            <ContainerStyle>\n                {state.cards.map((card: CardType) => <VideoPlayer key={card.id} card={card} />)}\n            </ContainerStyle>\n           <VideoPostForm />\n        </AppStyle>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\nimport card from './card';\nimport splash from './splash';\n\nconst rootReducer = combineReducers({\n    card, splash\n});\n\nexport type RootState = ReturnType<typeof rootReducer>\nexport default rootReducer;\n","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst persistConfig = {\n    key: 'root',\n    storage\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport default () => {\n    const isDev = process.env.NODE_ENV === 'development';\n    const reduxDevTools = isDev && (window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__();\n    const store = createStore(persistedReducer, reduxDevTools);\n    const persistor = persistStore(store);\n    return {store, persistor}\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport Store from 'store/index';\n\nconst {persistor, store} = Store();\n\nReactDOM.render(\n    <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n            <App/>\n        </PersistGate>\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}